---
title: "sap_timestep_supplement"
format: html
editor: visual
---

## Testing Simulations Over Longer Times

This document features code to run simulations for 1000 timesteps to show when qualitative patterns emerge. It provide the information for Supplement 2.

### Setup

```{r}
# load code
library(tidyverse)
library(furrr)
library(ape)
library(som.nn)
library(broom)
source("parasite_sim_functions.R")

## load ls data
ls_list <- read_rds("sim_output/ls_list_20230416_103809.rds")

## filter for only landscapes with no clustering
ls_subset <- map(.x = ls_list, .f = function(x){
  if(x$ls_stats$cluster %in% c(0, 5, 10, 15) & x$ls_stats$prop %in% c(0.1, 0.5, 0.9))
    {return(x)}
})
ls_subset <- ls_subset[!unlist(map(.x = ls_subset, .f = function(x){is.null(x)}))]

rm(ls_list)
```

### Simulate

```{r}
## create vector of recovery probabilities
recovs <- rep(c(0.05, 0.15, 0.25), 12)
## create replicated list for mapping
ls_rep <- rep(ls_subset, each = 3)

## run simulations for those probabilities
# set multisession plan
plan(multisession)
# run function in parallel
long_sims <- future_map2(
  .x = ls_rep,
  .y = recovs,
  ~parasite_sim(landscape = .x, n_hosts = 96, n_moves = 1000,
                n_reps = 10, recov_prob = .y),
  .options = furrr_options(seed = TRUE),
  .progress = TRUE
)
plan(sequential)

## save simulations
timestamp <- format(Sys.time(), format = "%Y%m%d_%H%M%S")
write_rds(long_sims, str_c("sim_output/long_sims_", timestamp, ".rds"))


```

### Examine

```{r}
long_sims <- read_rds("sim_output/long_sims_20240702_091817.rds")

## filter something easier to plot
long_sim_data <- map_df(
  long_sims,
  function(x){
    filter(x, time %% 20 == 0 | time == 1)
  }
)

long_summary <- long_sim_data %>%
  filter(time != 0) %>%
  group_by(prop, rep_id, recov_prob, cluster, time) %>%
  summarize(mean_cur = mean(cur_burden),
            mean_cum = mean(cum_burden),
            var_cur = var(cur_burden),
            var_cum = var(cum_burden),
            disp_cur = var_cur / mean_cur,
            disp_cum = var_cum / mean_cum,
            disp_diff = disp_cur - disp_cum,
            mean_diff = mean_cur - mean_cum,
            var_diff = var_cur - var_cum)


ggplot(long_summary, aes(x = time, y = disp_cur, color = factor(prop))) +
  geom_point() +
  geom_smooth(se = FALSE) +
  facet_grid(rows = vars(cluster), cols = vars(recov_prob)) +
  scale_color_viridis_d(name = "Parasite Density \n(Proportion Cells Occupied)") +
  scale_x_continuous(name = "Timestep",
                     sec.axis = sec_axis(~ . , name = "Recovery Rate", 
                                         breaks = NULL, labels = NULL)) +
  scale_y_continuous(name = "'Snapshot' Burden Dispersion",
                     sec.axis = sec_axis(~ . , name = "Cluster Factor", 
                                         breaks = NULL, labels = NULL)) +
  #coord_cartesian(xlim = c(0, 500)) +
  theme_bw() +
  theme(legend.position = "bottom")

ggplot(long_summary, aes(x = time, y = disp_cum, color = factor(prop))) +
  geom_point() +
  geom_smooth(se = FALSE) +
  facet_grid(rows = vars(cluster), cols = vars(recov_prob)) +
  scale_color_viridis_d(name = "Parasite Density \n(Proportion Cells Occupied)") +
  scale_x_continuous(name = "Timestep",
                     sec.axis = sec_axis(~ . , name = "Recovery Rate", 
                                         breaks = NULL, labels = NULL)) +
  scale_y_continuous(name = "'Snapshot' Burden Dispersion",
                     sec.axis = sec_axis(~ . , name = "Cluster Factor", 
                                         breaks = NULL, labels = NULL)) +
  #coord_cartesian(xlim = c(0, 500)) +
  theme_bw() +
  theme(legend.position = "bottom")

long_sim_data <- mutate(long_sim_data, sim_id = str_c(prop, cluster, recov_prob, rep_id, sep = "_"))

sim_ids <- rep(unique(long_sim_data$sim_id), each = 50)
times <- rep(seq(20, 1000, by = 20), 360)

cor_function <- function(a, b){
    temp_dat <- long_sim_data %>% filter(sim_id == a, time == b)
    temp_prop <- temp_dat$prop %>% unique()
    temp_cluster <- temp_dat$cluster %>% unique()
    temp_recov <- temp_dat$recov_prob %>% unique()
    result <- cor.test(~ cum_burden + cur_burden, data = temp_dat) %>% tidy() %>%
      mutate(prop = temp_prop, cluster = temp_cluster, recov_prob = temp_recov, time = b)
    return(result)
}

cor_function(a = "0.1_0_0.05_1", b = 20)

cors <- map2_df(
  .x = sim_ids,
  .y = times,
  ~cor_function(a = .x, b = .y)) 

write_rds(cors, str_c("sim_output/long_sim_cors", timestamp, ".rds"))

ggplot(cors, aes(x = time, y = estimate, color = factor(prop))) +
  geom_point(alpha = 0.25) +
  geom_smooth(se = FALSE, method = "lm") +
  facet_grid(rows = vars(cluster), cols = vars(recov_prob)) +
  scale_color_viridis_d(name = "Parasite Density \n(Proportion Cells Occupied)") +
  scale_x_continuous(name = "Timestep",
                     sec.axis = sec_axis(~ . , name = "Recovery Rate", 
                                         breaks = NULL, labels = NULL)) +
  scale_y_continuous(name = "Correlation between 'Snapshot' and \nCumulative Burdens",
                     sec.axis = sec_axis(~ . , name = "Cluster Factor", 
                                         breaks = NULL, labels = NULL)) +
  theme_bw() +
  theme(legend.position = "bottom")
```
